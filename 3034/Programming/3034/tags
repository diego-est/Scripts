!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/Michorron/Scripts/3034/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20221218.0/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
BUILD	mylib/unit_tests/Makefile	/^BUILD=.\/build$/;"	m
BUILD	power/Makefile	/^BUILD=build$/;"	m
BUILD	primerexamen_segundaparte/Makefile	/^BUILD=build$/;"	m
BUILD	test/Makefile	/^BUILD=build$/;"	m
BUILD	test/src/mylib/unit_tests/Makefile	/^BUILD=.\/build$/;"	m
Back	asignaciones/asig5.cpp	/^	Back,$/;"	e	enum:MenuOpt	file:
BinaryNode	mylib/binary_node.hpp	/^struct BinaryNode {$/;"	s
BinaryNode	mylib/binary_node_impl.hpp	/^BinaryNode<T>::BinaryNode(const T data, ptr<BinaryNode> left, ptr<BinaryNode> right)$/;"	f	class:BinaryNode
BinaryNode	test/src/mylib/binary_node.hpp	/^struct BinaryNode {$/;"	s
BinaryNode	test/src/mylib/binary_node_impl.hpp	/^BinaryNode<T>::BinaryNode(const T data, ptr<BinaryNode> left, ptr<BinaryNode> right)$/;"	f	class:BinaryNode
CIRCLE_H_	asignaciones/asig2.cpp	/^#define CIRCLE_H_$/;"	d	file:
CXX	asignaciones/makefile	/^CXX=g++$/;"	m
CXX	mylib/unit_tests/Makefile	/^CXX=clang++$/;"	m
CXX	power/Makefile	/^CXX=clang++$/;"	m
CXX	primerexamen_segundaparte/Makefile	/^CXX=clang++$/;"	m
CXX	test/Makefile	/^CXX=g++$/;"	m
CXX	test/src/mylib/unit_tests/Makefile	/^CXX=clang++$/;"	m
CXXFLAGS	mylib/unit_tests/Makefile	/^CXXFLAGS=-Weverything -Werror -Wconversion --std=c++20 -Wno-c++98-compat -Wno-padded -Wno-docume/;"	m
CXXFLAGS	test/src/mylib/unit_tests/Makefile	/^CXXFLAGS=-Weverything -Werror -Wconversion --std=c++20 -Wno-c++98-compat -Wno-padded -Wno-docume/;"	m
CYLINDER_H_	asignaciones/asig2.cpp	/^#define CYLINDER_H_$/;"	d	file:
Circle	asignaciones/asig1.cpp	/^Circle::Circle(double radius) : _radius(radius)$/;"	f	class:Circle
Circle	asignaciones/asig1.cpp	/^class Circle$/;"	c	file:
Circle	asignaciones/asig2.cpp	/^Circle::Circle(double radius) : _r(radius)$/;"	f	class:Circle
Circle	asignaciones/asig2.cpp	/^class Circle {$/;"	c	file:
Circle	mylib/circle.hpp	/^class Circle {$/;"	c
Circle	mylib/src/circle.cpp	/^Circle::Circle(double radius) :m_radius(radius)$/;"	f	class:Circle
Circle	test/src/mylib/circle.hpp	/^class Circle {$/;"	c
Circle	test/src/mylib/src/circle.cpp	/^Circle::Circle(double radius) :m_radius(radius)$/;"	f	class:Circle
CircleClass	asignaciones/asig2.cpp	/^	CircleClass,$/;"	e	enum:ClassType	file:
ClassType	asignaciones/asig2.cpp	/^enum ClassType {$/;"	g	file:
Clear	asignaciones/asig3.cpp	/^	Clear = 6,$/;"	e	enum:MenuOption	file:
Clear	asignaciones/asig5.cpp	/^	Clear,$/;"	e	enum:MenuOpt	file:
Cylinder	asignaciones/asig2.cpp	/^Cylinder::Cylinder(double radius, double height) : Circle(radius)$/;"	f	class:Cylinder
Cylinder	asignaciones/asig2.cpp	/^class Cylinder : public Circle {$/;"	c	file:
Cylinder	mylib/cylinder.hpp	/^class Cylinder : public Circle {$/;"	c
Cylinder	mylib/src/cylinder.cpp	/^Cylinder::Cylinder(double radius, double height) : Circle(radius), m_height(height)$/;"	f	class:Cylinder
Cylinder	test/src/mylib/cylinder.hpp	/^class Cylinder : public Circle {$/;"	c
Cylinder	test/src/mylib/src/cylinder.cpp	/^Cylinder::Cylinder(double radius, double height) : Circle(radius), m_height(height)$/;"	f	class:Cylinder
CylinderClass	asignaciones/asig2.cpp	/^	CylinderClass,$/;"	e	enum:ClassType	file:
Dequeue	asignaciones/asig5.cpp	/^	Dequeue,$/;"	e	enum:MenuOpt	file:
Display	asignaciones/asig3.cpp	/^	Display = 4,$/;"	e	enum:MenuOption	file:
Display	asignaciones/asig5.cpp	/^	Display,$/;"	e	enum:MenuOpt	file:
EMPLOYEE_H	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^#define EMPLOYEE_H$/;"	d	file:
EMPLOYEE_H	primerexamen_segundaparte/src/main.cpp	/^#define EMPLOYEE_H$/;"	d	file:
Employee	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^Employee::Employee(std::string const& first, std::string const& last, double hs,$/;"	f	class:Employee
Employee	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^class Employee : public Person {$/;"	c	file:
Employee	primerexamen_segundaparte/src/main.cpp	/^Employee::Employee(std::string const& first, std::string const& last, double hs,$/;"	f	class:Employee
Employee	primerexamen_segundaparte/src/main.cpp	/^class Employee : public Person {$/;"	c	file:
Enqueue	asignaciones/asig5.cpp	/^	Enqueue,$/;"	e	enum:MenuOpt	file:
Exit	asignaciones/asig3.cpp	/^	Exit = 7,$/;"	e	enum:MenuOption	file:
Exit	asignaciones/asig5.cpp	/^	Exit$/;"	e	enum:MenuOpt	file:
Front	asignaciones/asig5.cpp	/^	Front,$/;"	e	enum:MenuOpt	file:
Insert	asignaciones/asig3.cpp	/^	Insert = 1,$/;"	e	enum:MenuOption	file:
List	asignaciones/asig3.cpp	/^List::List() : m_head(nullptr), m_size(0lu)$/;"	f	class:List
List	asignaciones/asig3.cpp	/^List::List(const List& l) : m_head(nullptr), m_size(l.m_size)$/;"	f	class:List
List	asignaciones/asig3.cpp	/^class List {$/;"	c	file:
List	asignaciones/asig4.cpp	/^List::List() : m_head(nullptr), m_size(0lu)$/;"	f	class:List
List	asignaciones/asig4.cpp	/^List::List(const List& l) : m_head(nullptr), m_size(l.m_size)$/;"	f	class:List
List	asignaciones/asig4.cpp	/^class List {$/;"	c	file:
List	asignaciones/asig5.cpp	/^List::List() : m_head(nullptr), m_size(0lu)$/;"	f	class:List
List	asignaciones/asig5.cpp	/^List::List(const List& l) : m_head(nullptr), m_size(l.m_size)$/;"	f	class:List
List	asignaciones/asig5.cpp	/^class List {$/;"	c	file:
List	mylib/list.hpp	/^class List {$/;"	c
List	mylib/src/list.cpp	/^List::List() : m_head(nullptr), m_size(0lu)$/;"	f	class:List
List	mylib/src/list.cpp	/^List::List(const List& l) : m_head(nullptr), m_size(l.m_size)$/;"	f	class:List
List	test/src/mylib/list.hpp	/^class List {$/;"	c
List	test/src/mylib/src/list.cpp	/^List::List() : m_head(nullptr), m_size(0lu)$/;"	f	class:List
List	test/src/mylib/src/list.cpp	/^List::List(const List& l) : m_head(nullptr), m_size(l.m_size)$/;"	f	class:List
MenuOpt	asignaciones/asig5.cpp	/^enum MenuOpt {$/;"	g	file:
MenuOption	asignaciones/asig3.cpp	/^enum MenuOption {$/;"	g	file:
NOTEST	mylib/unit_tests/unit_tests.cpp	/^#define NOTEST$/;"	d	file:
NOTEST	test/src/mylib/unit_tests/unit_tests.cpp	/^#define NOTEST$/;"	d	file:
Node	asignaciones/asig3.cpp	/^	Node(int data, pointer<Node> ptr = nullptr) : link(ptr), info(data)$/;"	f	struct:Node	file:
Node	asignaciones/asig3.cpp	/^struct Node {$/;"	s	file:
Node	asignaciones/asig4.cpp	/^	Node(int data, pointer<Node> ptr = nullptr) : link(ptr), info(data)$/;"	f	struct:Node	file:
Node	asignaciones/asig4.cpp	/^struct Node {$/;"	s	file:
Node	asignaciones/asig5.cpp	/^	Node(int data, pointer<Node> ptr = nullptr) : link(ptr), info(data)$/;"	f	struct:Node	file:
Node	asignaciones/asig5.cpp	/^struct Node {$/;"	s	file:
Node	mylib/node.hpp	/^	Node(int data, pointer<Node> ptr = nullptr) : link(ptr), info(data)$/;"	f	struct:Node
Node	mylib/node.hpp	/^struct Node {$/;"	s
Node	test/src/mylib/node.hpp	/^	Node(int data, pointer<Node> ptr = nullptr) : link(ptr), info(data)$/;"	f	struct:Node
Node	test/src/mylib/node.hpp	/^struct Node {$/;"	s
None	asignaciones/asig3.cpp	/^	None = 0,$/;"	e	enum:MenuOption	file:
None	asignaciones/asig5.cpp	/^	None = 0,$/;"	e	enum:MenuOpt	file:
PERSON_H	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^#define PERSON_H$/;"	d	file:
PERSON_H	primerexamen_segundaparte/src/main.cpp	/^#define PERSON_H$/;"	d	file:
Person	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^Person::Person(std::string const& first, std::string const& last)$/;"	f	class:Person
Person	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^class Person {$/;"	c	file:
Person	primerexamen_segundaparte/src/main.cpp	/^Person::Person(std::string const& first, std::string const& last)$/;"	f	class:Person
Person	primerexamen_segundaparte/src/main.cpp	/^class Person {$/;"	c	file:
Queue	asignaciones/asig5.cpp	/^Queue::Queue()$/;"	f	class:Queue
Queue	asignaciones/asig5.cpp	/^Queue::Queue(reference<const Queue> rhs)$/;"	f	class:Queue
Queue	asignaciones/asig5.cpp	/^class Queue : public List {$/;"	c	file:
Queue	mylib/queue.hpp	/^class Queue : public List {$/;"	c
Queue	mylib/src/queue.cpp	/^Queue::Queue()$/;"	f	class:Queue
Queue	mylib/src/queue.cpp	/^Queue::Queue(reference<const Queue> rhs)$/;"	f	class:Queue
Queue	test/src/mylib/queue.hpp	/^class Queue : public List {$/;"	c
Queue	test/src/mylib/src/queue.cpp	/^Queue::Queue()$/;"	f	class:Queue
Queue	test/src/mylib/src/queue.cpp	/^Queue::Queue(reference<const Queue> rhs)$/;"	f	class:Queue
Remove	asignaciones/asig3.cpp	/^	Remove = 2,$/;"	e	enum:MenuOption	file:
SPHERE_H	asignaciones/asig2.cpp	/^#define SPHERE_H$/;"	d	file:
SRC	mylib/unit_tests/Makefile	/^SRC=..\/src\/*.cpp $(FILE)$/;"	m
SRC	power/Makefile	/^SRC=src\/main.cpp$/;"	m
SRC	primerexamen_segundaparte/Makefile	/^SRC=src\/main.cpp$/;"	m
SRC	test/Makefile	/^SRC=src\/*.cpp$/;"	m
SRC	test/src/mylib/unit_tests/Makefile	/^SRC=..\/src\/*.cpp $(FILE)$/;"	m
Search	asignaciones/asig3.cpp	/^	Search = 3,$/;"	e	enum:MenuOption	file:
Size	asignaciones/asig3.cpp	/^	Size = 5,$/;"	e	enum:MenuOption	file:
Size	asignaciones/asig5.cpp	/^	Size,$/;"	e	enum:MenuOpt	file:
SortedList	asignaciones/asig3.cpp	/^SortedList::SortedList() : List()$/;"	f	class:SortedList
SortedList	asignaciones/asig3.cpp	/^SortedList::SortedList(reference<const SortedList> sl) : List()$/;"	f	class:SortedList
SortedList	asignaciones/asig3.cpp	/^class SortedList : public List {$/;"	c	file:
SortedList	mylib/sorted_list.hpp	/^class SortedList : public List {$/;"	c
SortedList	mylib/src/sorted_list.cpp	/^SortedList::SortedList() : List()$/;"	f	class:SortedList
SortedList	mylib/src/sorted_list.cpp	/^SortedList::SortedList(reference<const SortedList> sl)$/;"	f	class:SortedList
SortedList	test/src/mylib/sorted_list.hpp	/^class SortedList : public List {$/;"	c
SortedList	test/src/mylib/src/sorted_list.cpp	/^SortedList::SortedList() : List()$/;"	f	class:SortedList
SortedList	test/src/mylib/src/sorted_list.cpp	/^SortedList::SortedList(reference<const SortedList> sl)$/;"	f	class:SortedList
Sphere	asignaciones/asig2.cpp	/^Sphere::Sphere(double radius) : Circle(radius)$/;"	f	class:Sphere
Sphere	asignaciones/asig2.cpp	/^class Sphere : public Circle {$/;"	c	file:
Sphere	mylib/sphere.hpp	/^class Sphere : public Circle {$/;"	c
Sphere	mylib/src/sphere.cpp	/^Sphere::Sphere(double radius) : Circle(radius)$/;"	f	class:Sphere
Sphere	test/src/mylib/sphere.hpp	/^class Sphere : public Circle {$/;"	c
Sphere	test/src/mylib/src/sphere.cpp	/^Sphere::Sphere(double radius) : Circle(radius)$/;"	f	class:Sphere
SphereClass	asignaciones/asig2.cpp	/^	SphereClass,$/;"	e	enum:ClassType	file:
Stack	asignaciones/asig4.cpp	/^Stack::Stack() : List()$/;"	f	class:Stack
Stack	asignaciones/asig4.cpp	/^Stack::Stack(reference<const Stack> rhs)$/;"	f	class:Stack
Stack	asignaciones/asig4.cpp	/^class Stack : public List {$/;"	c	file:
Stack	mylib/src/stack.cpp	/^Stack::Stack() : List()$/;"	f	class:Stack
Stack	mylib/src/stack.cpp	/^Stack::Stack(reference<const Stack> rhs)$/;"	f	class:Stack
Stack	mylib/stack.hpp	/^class Stack : public List {$/;"	c
Stack	test/src/mylib/src/stack.cpp	/^Stack::Stack() : List()$/;"	f	class:Stack
Stack	test/src/mylib/src/stack.cpp	/^Stack::Stack(reference<const Stack> rhs)$/;"	f	class:Stack
Stack	test/src/mylib/stack.hpp	/^class Stack : public List {$/;"	c
_h	asignaciones/asig2.cpp	/^	double _h;$/;"	m	class:Cylinder	typeref:typename:double	file:
_r	asignaciones/asig2.cpp	/^	double _r;$/;"	m	class:Circle	typeref:typename:double	file:
_radius	asignaciones/asig1.cpp	/^        double _radius;$/;"	m	class:Circle	typeref:typename:double	file:
append	asignaciones/asig3.cpp	/^auto List::append(int value) -> void$/;"	f	class:List	typeref:typename:void
append	asignaciones/asig4.cpp	/^auto List::append(int value) -> void$/;"	f	class:List	typeref:typename:void
append	asignaciones/asig5.cpp	/^auto List::append(int value) -> void$/;"	f	class:List	typeref:typename:void
append	mylib/src/list.cpp	/^auto List::append(int value) -> void$/;"	f	class:List	typeref:typename:void
append	test/src/mylib/src/list.cpp	/^auto List::append(int value) -> void$/;"	f	class:List	typeref:typename:void
back	asignaciones/asig5.cpp	/^auto Queue::back() const -> int$/;"	f	class:Queue	typeref:typename:int
back	mylib/src/queue.cpp	/^auto Queue::back() const -> int$/;"	f	class:Queue	typeref:typename:int
back	test/src/mylib/src/queue.cpp	/^auto Queue::back() const -> int$/;"	f	class:Queue	typeref:typename:int
begin	asignaciones/asig3.cpp	/^[[nodiscard]] auto List::begin() const -> pointer<Node>$/;"	f	class:List	typeref:typename:pointer<Node>
begin	asignaciones/asig4.cpp	/^[[nodiscard]] auto List::begin() const -> pointer<Node>$/;"	f	class:List	typeref:typename:pointer<Node>
begin	asignaciones/asig5.cpp	/^[[nodiscard]] auto List::begin() const -> pointer<Node>$/;"	f	class:List	typeref:typename:pointer<Node>
begin	mylib/src/list.cpp	/^[[nodiscard]] auto List::begin() const -> pointer<Node>$/;"	f	class:List	typeref:typename:pointer<Node>
begin	test/src/mylib/src/list.cpp	/^[[nodiscard]] auto List::begin() const -> pointer<Node>$/;"	f	class:List	typeref:typename:pointer<Node>
bs	test/src/main.cpp	/^auto bs(std::vector<int>& v, int i)$/;"	f	typeref:typename:auto
bsr	test/src/main.cpp	/^auto bsr(std::vector<int>& v, int i, size_t f, size_t l)$/;"	f	typeref:typename:auto
bst	mylib/bst.hpp	/^class bst : public btree<T> {$/;"	c
bst	test/src/mylib/bst.hpp	/^class bst : public btree<T> {$/;"	c
btree	mylib/binary_tree.hpp	/^class btree {$/;"	c
btree	mylib/binary_tree_impl.hpp	/^btree<T>::btree()$/;"	f	class:btree
btree	mylib/binary_tree_impl.hpp	/^btree<T>::btree(ref<const btree> original)$/;"	f	class:btree
btree	test/src/mylib/binary_tree.hpp	/^class btree {$/;"	c
btree	test/src/mylib/binary_tree_impl.hpp	/^btree<T>::btree()$/;"	f	class:btree
btree	test/src/mylib/binary_tree_impl.hpp	/^btree<T>::btree(ref<const btree> original)$/;"	f	class:btree
bubble_sort	mylib/src/functions.cpp	/^auto bubble_sort(ref<std::vector<int>> arr) -> void$/;"	f	typeref:typename:void
bubble_sort	test/src/mylib/src/functions.cpp	/^auto bubble_sort(ref<std::vector<int>> arr) -> void$/;"	f	typeref:typename:void
build	mylib/unit_tests/Makefile	/^build:$/;"	t
build	power/Makefile	/^build: src\/main.cpp$/;"	t
build	primerexamen_segundaparte/Makefile	/^build: src\/main.cpp$/;"	t
build	test/Makefile	/^build: src\/main.cpp$/;"	t
build	test/src/mylib/unit_tests/Makefile	/^build:$/;"	t
cbegin	asignaciones/asig3.cpp	/^[[nodiscard]] auto List::cbegin() const -> pointer<const Node>$/;"	f	class:List	typeref:typename:pointer<const Node>
cbegin	asignaciones/asig4.cpp	/^[[nodiscard]] auto List::cbegin() const -> pointer<const Node>$/;"	f	class:List	typeref:typename:pointer<const Node>
cbegin	asignaciones/asig5.cpp	/^[[nodiscard]] auto List::cbegin() const -> pointer<const Node>$/;"	f	class:List	typeref:typename:pointer<const Node>
cbegin	mylib/src/list.cpp	/^[[nodiscard]] auto List::cbegin() const -> pointer<const Node>$/;"	f	class:List	typeref:typename:pointer<const Node>
cbegin	test/src/mylib/src/list.cpp	/^[[nodiscard]] auto List::cbegin() const -> pointer<const Node>$/;"	f	class:List	typeref:typename:pointer<const Node>
children_count	mylib/binary_node_impl.hpp	/^auto BinaryNode<T>::children_count() const -> size_t$/;"	f	class:BinaryNode	typeref:typename:size_t
children_count	test/src/mylib/binary_node_impl.hpp	/^auto BinaryNode<T>::children_count() const -> size_t$/;"	f	class:BinaryNode	typeref:typename:size_t
clear	asignaciones/asig3.cpp	/^auto List::clear() -> void$/;"	f	class:List	typeref:typename:void
clear	asignaciones/asig4.cpp	/^auto List::clear() -> void$/;"	f	class:List	typeref:typename:void
clear	asignaciones/asig5.cpp	/^auto List::clear() -> void$/;"	f	class:List	typeref:typename:void
clear	asignaciones/asig5.cpp	/^auto Queue::clear() -> void$/;"	f	class:Queue	typeref:typename:void
clear	mylib/src/list.cpp	/^auto List::clear() -> void$/;"	f	class:List	typeref:typename:void
clear	mylib/src/queue.cpp	/^auto Queue::clear() -> void$/;"	f	class:Queue	typeref:typename:void
clear	test/src/mylib/src/list.cpp	/^auto List::clear() -> void$/;"	f	class:List	typeref:typename:void
clear	test/src/mylib/src/queue.cpp	/^auto Queue::clear() -> void$/;"	f	class:Queue	typeref:typename:void
copy	asignaciones/asig3.cpp	/^auto List::copy(reference<const List> rhs) -> void$/;"	f	class:List	typeref:typename:void
copy	asignaciones/asig4.cpp	/^auto List::copy(reference<const List> rhs) -> void$/;"	f	class:List	typeref:typename:void
copy	asignaciones/asig5.cpp	/^auto List::copy(reference<const List> rhs) -> void$/;"	f	class:List	typeref:typename:void
copy	asignaciones/asig5.cpp	/^auto Queue::copy(reference<const Queue> rhs) -> void$/;"	f	class:Queue	typeref:typename:void
copy	mylib/src/list.cpp	/^auto List::copy(reference<const List> rhs) -> void$/;"	f	class:List	typeref:typename:void
copy	mylib/src/queue.cpp	/^auto Queue::copy(reference<const Queue> rhs) -> void$/;"	f	class:Queue	typeref:typename:void
copy	test/src/mylib/src/list.cpp	/^auto List::copy(reference<const List> rhs) -> void$/;"	f	class:List	typeref:typename:void
copy	test/src/mylib/src/queue.cpp	/^auto Queue::copy(reference<const Queue> rhs) -> void$/;"	f	class:Queue	typeref:typename:void
copy_branch	mylib/binary_node_impl.hpp	/^auto BinaryNode<T>::copy_branch(const ptr<const BinaryNode<T>> original) -> void$/;"	f	class:BinaryNode	typeref:typename:void
copy_branch	test/src/mylib/binary_node_impl.hpp	/^auto BinaryNode<T>::copy_branch(const ptr<const BinaryNode<T>> original) -> void$/;"	f	class:BinaryNode	typeref:typename:void
data	mylib/binary_node.hpp	/^	T data;$/;"	m	struct:BinaryNode	typeref:typename:T
data	mylib/fast_stack.hpp	/^	pointer<int> data;$/;"	m	class:fstack	typeref:typename:pointer<int>
data	test/src/mylib/binary_node.hpp	/^	T data;$/;"	m	struct:BinaryNode	typeref:typename:T
data	test/src/mylib/fast_stack.hpp	/^	pointer<int> data;$/;"	m	class:fstack	typeref:typename:pointer<int>
dequeue	asignaciones/asig5.cpp	/^auto Queue::dequeue() -> void$/;"	f	class:Queue	typeref:typename:void
dequeue	mylib/src/queue.cpp	/^auto Queue::dequeue() -> void$/;"	f	class:Queue	typeref:typename:void
dequeue	test/src/mylib/src/queue.cpp	/^auto Queue::dequeue() -> void$/;"	f	class:Queue	typeref:typename:void
display_binary	asignaciones/asig4.cpp	/^auto display_binary(Stack bs) -> void$/;"	f	typeref:typename:void
display_binary	mylib/unit_tests/main2.cpp	/^auto display_binary(Stack bs) -> void$/;"	f	typeref:typename:void
display_binary	test/src/mylib/unit_tests/main2.cpp	/^auto display_binary(Stack bs) -> void$/;"	f	typeref:typename:void
display_menu	asignaciones/asig1.cpp	/^auto display_menu() -> int$/;"	f	typeref:typename:int
display_menu	asignaciones/asig2.cpp	/^auto display_menu(ClassType class_type) -> int$/;"	f	typeref:typename:int
display_menu	asignaciones/asig3.cpp	/^auto display_menu() -> MenuOption$/;"	f	typeref:typename:MenuOption
display_menu	asignaciones/asig5.cpp	/^auto display_menu() -> MenuOpt$/;"	f	typeref:typename:MenuOpt
display_payroll	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^auto display_payroll(std::vector<Employee> const& payroll) -> void$/;"	f	typeref:typename:void
display_payroll	primerexamen_segundaparte/src/main.cpp	/^auto display_payroll(std::vector<Employee> const& payroll) -> void$/;"	f	typeref:typename:void
empty	asignaciones/asig3.cpp	/^[[nodiscard]] auto List::empty() const -> bool$/;"	f	class:List	typeref:typename:bool
empty	asignaciones/asig4.cpp	/^[[nodiscard]] auto List::empty() const -> bool$/;"	f	class:List	typeref:typename:bool
empty	asignaciones/asig5.cpp	/^[[nodiscard]] auto List::empty() const -> bool$/;"	f	class:List	typeref:typename:bool
empty	mylib/binary_tree_impl.hpp	/^[[nodiscard]] auto btree<T>::empty() const -> bool$/;"	f	class:btree	typeref:typename:bool
empty	mylib/src/fast_stack.cpp	/^auto fstack::empty() -> bool$/;"	f	class:fstack	typeref:typename:bool
empty	mylib/src/list.cpp	/^[[nodiscard]] auto List::empty() const -> bool$/;"	f	class:List	typeref:typename:bool
empty	test/src/mylib/binary_tree_impl.hpp	/^[[nodiscard]] auto btree<T>::empty() const -> bool$/;"	f	class:btree	typeref:typename:bool
empty	test/src/mylib/src/fast_stack.cpp	/^auto fstack::empty() -> bool$/;"	f	class:fstack	typeref:typename:bool
empty	test/src/mylib/src/list.cpp	/^[[nodiscard]] auto List::empty() const -> bool$/;"	f	class:List	typeref:typename:bool
enqueue	asignaciones/asig5.cpp	/^auto Queue::enqueue(int val) -> void$/;"	f	class:Queue	typeref:typename:void
enqueue	mylib/src/queue.cpp	/^auto Queue::enqueue(int val) -> void$/;"	f	class:Queue	typeref:typename:void
enqueue	test/src/mylib/src/queue.cpp	/^auto Queue::enqueue(int val) -> void$/;"	f	class:Queue	typeref:typename:void
execute_option	asignaciones/asig1.cpp	/^auto execute_option(int option, Circle &circle) -> void$/;"	f	typeref:typename:void
execute_option	asignaciones/asig2.cpp	/^auto execute_option(int option, Circle& circle) -> void$/;"	f	typeref:typename:void
execute_option	asignaciones/asig2.cpp	/^auto execute_option(int option, Cylinder& cylinder) -> void$/;"	f	typeref:typename:void
execute_option	asignaciones/asig2.cpp	/^auto execute_option(int option, Sphere& sphere) -> void$/;"	f	typeref:typename:void
execute_option	asignaciones/asig3.cpp	/^auto execute_option(MenuOption option, reference<SortedList> sorted_list)$/;"	f	typeref:typename:void
execute_option	asignaciones/asig5.cpp	/^void execute_option(MenuOpt option, Queue& q)$/;"	f	typeref:typename:void
find_max	mylib/bst_impl.hpp	/^auto bst<T>::find_max() const -> T$/;"	f	class:bst	typeref:typename:T
find_max	test/src/mylib/bst_impl.hpp	/^auto bst<T>::find_max() const -> T$/;"	f	class:bst	typeref:typename:T
find_min	mylib/bst_impl.hpp	/^auto bst<T>::find_min() const -> T$/;"	f	class:bst	typeref:typename:T
find_min	test/src/mylib/bst_impl.hpp	/^auto bst<T>::find_min() const -> T$/;"	f	class:bst	typeref:typename:T
format	mylib/unit_tests/Makefile	/^format:$/;"	t
format	power/Makefile	/^format:$/;"	t
format	primerexamen_segundaparte/Makefile	/^format:$/;"	t
format	test/Makefile	/^format:$/;"	t
format	test/src/mylib/unit_tests/Makefile	/^format:$/;"	t
front	asignaciones/asig5.cpp	/^auto Queue::front() const -> int$/;"	f	class:Queue	typeref:typename:int
front	mylib/src/queue.cpp	/^auto Queue::front() const -> int$/;"	f	class:Queue	typeref:typename:int
front	test/src/mylib/src/queue.cpp	/^auto Queue::front() const -> int$/;"	f	class:Queue	typeref:typename:int
fstack	mylib/fast_stack.hpp	/^class fstack {$/;"	c
fstack	mylib/src/fast_stack.cpp	/^fstack::fstack()$/;"	f	class:fstack
fstack	test/src/mylib/fast_stack.hpp	/^class fstack {$/;"	c
fstack	test/src/mylib/src/fast_stack.cpp	/^fstack::fstack()$/;"	f	class:fstack
get_area	asignaciones/asig1.cpp	/^[[nodiscard]] auto Circle::get_area() const -> double$/;"	f	class:Circle	typeref:typename:double
get_area	asignaciones/asig2.cpp	/^auto Circle::get_area() const -> double$/;"	f	class:Circle	typeref:typename:double
get_area	mylib/src/circle.cpp	/^auto Circle::get_area() const -> double$/;"	f	class:Circle	typeref:typename:double
get_area	test/src/mylib/src/circle.cpp	/^auto Circle::get_area() const -> double$/;"	f	class:Circle	typeref:typename:double
get_circumference	asignaciones/asig1.cpp	/^[[nodiscard]] auto Circle::get_circumference() const -> double$/;"	f	class:Circle	typeref:typename:double
get_circumference	asignaciones/asig2.cpp	/^auto Circle::get_circumference() const -> double$/;"	f	class:Circle	typeref:typename:double
get_circumference	mylib/src/circle.cpp	/^auto Circle::get_circumference() const -> double$/;"	f	class:Circle	typeref:typename:double
get_circumference	test/src/mylib/src/circle.cpp	/^auto Circle::get_circumference() const -> double$/;"	f	class:Circle	typeref:typename:double
get_diameter	asignaciones/asig1.cpp	/^[[nodiscard]] auto Circle::get_diameter() const -> double$/;"	f	class:Circle	typeref:typename:double
get_diameter	asignaciones/asig2.cpp	/^auto Circle::get_diameter() const -> double$/;"	f	class:Circle	typeref:typename:double
get_diameter	mylib/src/circle.cpp	/^auto Circle::get_diameter() const -> double$/;"	f	class:Circle	typeref:typename:double
get_diameter	test/src/mylib/src/circle.cpp	/^auto Circle::get_diameter() const -> double$/;"	f	class:Circle	typeref:typename:double
get_dimensions	asignaciones/asig2.cpp	/^auto Cylinder::get_dimensions(double& radius, double& height) const -> void$/;"	f	class:Cylinder	typeref:typename:void
get_dimensions	mylib/src/cylinder.cpp	/^auto Cylinder::get_dimensions(double& radius, double& height) const -> void$/;"	f	class:Cylinder	typeref:typename:void
get_dimensions	test/src/mylib/src/cylinder.cpp	/^auto Cylinder::get_dimensions(double& radius, double& height) const -> void$/;"	f	class:Cylinder	typeref:typename:void
get_first_name	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^auto Person::get_first_name() const -> std::string$/;"	f	class:Person	typeref:typename:std::string
get_first_name	primerexamen_segundaparte/src/main.cpp	/^auto Person::get_first_name() const -> std::string$/;"	f	class:Person	typeref:typename:std::string
get_full_name	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^auto Person::get_full_name(std::string& first, std::string& last) const -> void$/;"	f	class:Person	typeref:typename:void
get_full_name	primerexamen_segundaparte/src/main.cpp	/^auto Person::get_full_name(std::string& first, std::string& last) const -> void$/;"	f	class:Person	typeref:typename:void
get_height	asignaciones/asig2.cpp	/^auto Cylinder::get_height() const -> double$/;"	f	class:Cylinder	typeref:typename:double
get_height	mylib/src/cylinder.cpp	/^auto Cylinder::get_height() const -> double$/;"	f	class:Cylinder	typeref:typename:double
get_height	test/src/mylib/src/cylinder.cpp	/^auto Cylinder::get_height() const -> double$/;"	f	class:Cylinder	typeref:typename:double
get_hourly_salary	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^auto Employee::get_hourly_salary() const -> double$/;"	f	class:Employee	typeref:typename:double
get_hourly_salary	primerexamen_segundaparte/src/main.cpp	/^auto Employee::get_hourly_salary() const -> double$/;"	f	class:Employee	typeref:typename:double
get_hours_worked	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^auto Employee::get_hours_worked() const -> double$/;"	f	class:Employee	typeref:typename:double
get_hours_worked	primerexamen_segundaparte/src/main.cpp	/^auto Employee::get_hours_worked() const -> double$/;"	f	class:Employee	typeref:typename:double
get_last_name	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^auto Person::get_last_name() const -> std::string$/;"	f	class:Person	typeref:typename:std::string
get_last_name	primerexamen_segundaparte/src/main.cpp	/^auto Person::get_last_name() const -> std::string$/;"	f	class:Person	typeref:typename:std::string
get_radius	asignaciones/asig1.cpp	/^[[nodiscard]] auto Circle::get_radius() const -> double { return _radius; }$/;"	f	class:Circle	typeref:typename:double
get_radius	asignaciones/asig2.cpp	/^	inline auto get_radius() const -> double$/;"	f	class:Circle	typeref:typename:double	file:
get_radius	mylib/src/circle.cpp	/^auto Circle::get_radius() const -> double$/;"	f	class:Circle	typeref:typename:double
get_radius	test/src/mylib/src/circle.cpp	/^auto Circle::get_radius() const -> double$/;"	f	class:Circle	typeref:typename:double
get_surface_area	asignaciones/asig2.cpp	/^auto Cylinder::get_surface_area() const -> double$/;"	f	class:Cylinder	typeref:typename:double
get_surface_area	asignaciones/asig2.cpp	/^auto Sphere::get_surface_area() const -> double$/;"	f	class:Sphere	typeref:typename:double
get_surface_area	mylib/src/cylinder.cpp	/^auto Cylinder::get_surface_area() const -> double$/;"	f	class:Cylinder	typeref:typename:double
get_surface_area	mylib/src/sphere.cpp	/^auto Sphere::get_surface_area() const -> double$/;"	f	class:Sphere	typeref:typename:double
get_surface_area	test/src/mylib/src/cylinder.cpp	/^auto Cylinder::get_surface_area() const -> double$/;"	f	class:Cylinder	typeref:typename:double
get_surface_area	test/src/mylib/src/sphere.cpp	/^auto Sphere::get_surface_area() const -> double$/;"	f	class:Sphere	typeref:typename:double
get_volume	asignaciones/asig2.cpp	/^auto Cylinder::get_volume() const -> double$/;"	f	class:Cylinder	typeref:typename:double
get_volume	asignaciones/asig2.cpp	/^auto Sphere::get_volume() const -> double$/;"	f	class:Sphere	typeref:typename:double
get_volume	mylib/src/cylinder.cpp	/^auto Cylinder::get_volume() const -> double$/;"	f	class:Cylinder	typeref:typename:double
get_volume	mylib/src/sphere.cpp	/^auto Sphere::get_volume() const -> double$/;"	f	class:Sphere	typeref:typename:double
get_volume	test/src/mylib/src/cylinder.cpp	/^auto Cylinder::get_volume() const -> double$/;"	f	class:Cylinder	typeref:typename:double
get_volume	test/src/mylib/src/sphere.cpp	/^auto Sphere::get_volume() const -> double$/;"	f	class:Sphere	typeref:typename:double
get_weekly_salary	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^auto Employee::get_weekly_salary() const -> double$/;"	f	class:Employee	typeref:typename:double
get_weekly_salary	primerexamen_segundaparte/src/main.cpp	/^auto Employee::get_weekly_salary() const -> double$/;"	f	class:Employee	typeref:typename:double
graph	mylib/binary_node_impl.hpp	/^auto BinaryNode<T>::graph(const int height) const -> void$/;"	f	class:BinaryNode	typeref:typename:void
graph	mylib/binary_tree_impl.hpp	/^auto btree<T>::graph() const -> void$/;"	f	class:btree	typeref:typename:void
graph	test/src/mylib/binary_node_impl.hpp	/^auto BinaryNode<T>::graph(const int height) const -> void$/;"	f	class:BinaryNode	typeref:typename:void
graph	test/src/mylib/binary_tree_impl.hpp	/^auto btree<T>::graph() const -> void$/;"	f	class:btree	typeref:typename:void
height	mylib/binary_node_impl.hpp	/^auto BinaryNode<T>::height() const -> size_t$/;"	f	class:BinaryNode	typeref:typename:size_t
height	mylib/binary_tree_impl.hpp	/^auto btree<T>::height() const -> int$/;"	f	class:btree	typeref:typename:int
height	test/src/mylib/binary_node_impl.hpp	/^auto BinaryNode<T>::height() const -> size_t$/;"	f	class:BinaryNode	typeref:typename:size_t
height	test/src/mylib/binary_tree_impl.hpp	/^auto btree<T>::height() const -> int$/;"	f	class:btree	typeref:typename:int
info	asignaciones/asig3.cpp	/^	int info;$/;"	m	struct:Node	typeref:typename:int	file:
info	asignaciones/asig4.cpp	/^	int info;$/;"	m	struct:Node	typeref:typename:int	file:
info	asignaciones/asig5.cpp	/^	int info;$/;"	m	struct:Node	typeref:typename:int	file:
info	mylib/node.hpp	/^	int info;$/;"	m	struct:Node	typeref:typename:int
info	test/src/mylib/node.hpp	/^	int info;$/;"	m	struct:Node	typeref:typename:int
insert	asignaciones/asig3.cpp	/^auto SortedList::insert(int value) -> void$/;"	f	class:SortedList	typeref:typename:void
insert	mylib/bst_impl.hpp	/^auto bst<T>::insert(const T item) -> void$/;"	f	class:bst	typeref:typename:void
insert	mylib/src/sorted_list.cpp	/^auto SortedList::insert(int value) -> void$/;"	f	class:SortedList	typeref:typename:void
insert	test/src/mylib/bst_impl.hpp	/^auto bst<T>::insert(const T item) -> void$/;"	f	class:bst	typeref:typename:void
insert	test/src/mylib/src/sorted_list.cpp	/^auto SortedList::insert(int value) -> void$/;"	f	class:SortedList	typeref:typename:void
is_leaf	mylib/binary_node_impl.hpp	/^[[nodiscard]] auto BinaryNode<T>::is_leaf() const -> bool$/;"	f	class:BinaryNode	typeref:typename:bool
is_leaf	test/src/mylib/binary_node_impl.hpp	/^[[nodiscard]] auto BinaryNode<T>::is_leaf() const -> bool$/;"	f	class:BinaryNode	typeref:typename:bool
leaves	mylib/binary_tree_impl.hpp	/^auto btree<T>::leaves() const -> size_t$/;"	f	class:btree	typeref:typename:size_t
leaves	test/src/mylib/binary_tree_impl.hpp	/^auto btree<T>::leaves() const -> size_t$/;"	f	class:btree	typeref:typename:size_t
leaves_count	mylib/binary_node_impl.hpp	/^auto BinaryNode<T>::leaves_count() const -> size_t$/;"	f	class:BinaryNode	typeref:typename:size_t
leaves_count	test/src/mylib/binary_node_impl.hpp	/^auto BinaryNode<T>::leaves_count() const -> size_t$/;"	f	class:BinaryNode	typeref:typename:size_t
left	mylib/binary_node.hpp	/^	ptr<BinaryNode> left;$/;"	m	struct:BinaryNode	typeref:typename:ptr<BinaryNode>
left	test/src/mylib/binary_node.hpp	/^	ptr<BinaryNode> left;$/;"	m	struct:BinaryNode	typeref:typename:ptr<BinaryNode>
length	asignaciones/asig3.cpp	/^[[nodiscard]] auto List::length() const -> std::size_t$/;"	f	class:List	typeref:typename:std::size_t
length	asignaciones/asig4.cpp	/^[[nodiscard]] auto List::length() const -> std::size_t$/;"	f	class:List	typeref:typename:std::size_t
length	asignaciones/asig5.cpp	/^[[nodiscard]] auto List::length() const -> std::size_t$/;"	f	class:List	typeref:typename:std::size_t
length	mylib/src/list.cpp	/^[[nodiscard]] auto List::length() const -> std::size_t$/;"	f	class:List	typeref:typename:std::size_t
length	test/src/mylib/src/list.cpp	/^[[nodiscard]] auto List::length() const -> std::size_t$/;"	f	class:List	typeref:typename:std::size_t
link	asignaciones/asig3.cpp	/^	pointer<Node> link;$/;"	m	struct:Node	typeref:typename:pointer<Node>	file:
link	asignaciones/asig4.cpp	/^	pointer<Node> link;$/;"	m	struct:Node	typeref:typename:pointer<Node>	file:
link	asignaciones/asig5.cpp	/^	pointer<Node> link;$/;"	m	struct:Node	typeref:typename:pointer<Node>	file:
link	mylib/node.hpp	/^	pointer<Node> link;$/;"	m	struct:Node	typeref:typename:pointer<Node>
link	test/src/mylib/node.hpp	/^	pointer<Node> link;$/;"	m	struct:Node	typeref:typename:pointer<Node>
m_first	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^	std::string m_first;$/;"	m	class:Person	typeref:typename:std::string	file:
m_first	primerexamen_segundaparte/src/main.cpp	/^	std::string m_first;$/;"	m	class:Person	typeref:typename:std::string	file:
m_front	asignaciones/asig5.cpp	/^	pointer<Node>& m_front = m_head;$/;"	m	class:Queue	typeref:typename:pointer<Node> &	file:
m_front	mylib/queue.hpp	/^	pointer<Node>& m_front = m_head;$/;"	m	class:Queue	typeref:typename:pointer<Node> &
m_front	test/src/mylib/queue.hpp	/^	pointer<Node>& m_front = m_head;$/;"	m	class:Queue	typeref:typename:pointer<Node> &
m_head	asignaciones/asig3.cpp	/^	pointer<Node> m_head;$/;"	m	class:List	typeref:typename:pointer<Node>	file:
m_head	asignaciones/asig4.cpp	/^	pointer<Node> m_head;$/;"	m	class:List	typeref:typename:pointer<Node>	file:
m_head	asignaciones/asig5.cpp	/^	pointer<Node> m_head;$/;"	m	class:List	typeref:typename:pointer<Node>	file:
m_head	mylib/list.hpp	/^	pointer<Node> m_head;$/;"	m	class:List	typeref:typename:pointer<Node>
m_head	test/src/mylib/list.hpp	/^	pointer<Node> m_head;$/;"	m	class:List	typeref:typename:pointer<Node>
m_height	mylib/cylinder.hpp	/^	double m_height;$/;"	m	class:Cylinder	typeref:typename:double
m_height	test/src/mylib/cylinder.hpp	/^	double m_height;$/;"	m	class:Cylinder	typeref:typename:double
m_hours	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^	double m_hours;$/;"	m	class:Employee	typeref:typename:double	file:
m_hours	primerexamen_segundaparte/src/main.cpp	/^	double m_hours;$/;"	m	class:Employee	typeref:typename:double	file:
m_last	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^	std::string m_last;$/;"	m	class:Person	typeref:typename:std::string	file:
m_last	primerexamen_segundaparte/src/main.cpp	/^	std::string m_last;$/;"	m	class:Person	typeref:typename:std::string	file:
m_radius	mylib/circle.hpp	/^	double m_radius;$/;"	m	class:Circle	typeref:typename:double
m_radius	test/src/mylib/circle.hpp	/^	double m_radius;$/;"	m	class:Circle	typeref:typename:double
m_rear	asignaciones/asig5.cpp	/^	pointer<Node> m_rear;$/;"	m	class:Queue	typeref:typename:pointer<Node>	file:
m_rear	mylib/queue.hpp	/^	pointer<Node> m_rear;$/;"	m	class:Queue	typeref:typename:pointer<Node>
m_rear	test/src/mylib/queue.hpp	/^	pointer<Node> m_rear;$/;"	m	class:Queue	typeref:typename:pointer<Node>
m_salary	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^	double m_salary;$/;"	m	class:Employee	typeref:typename:double	file:
m_salary	primerexamen_segundaparte/src/main.cpp	/^	double m_salary;$/;"	m	class:Employee	typeref:typename:double	file:
m_size	asignaciones/asig3.cpp	/^	size_t m_size;$/;"	m	class:List	typeref:typename:size_t	file:
m_size	asignaciones/asig4.cpp	/^	size_t m_size;$/;"	m	class:List	typeref:typename:size_t	file:
m_size	asignaciones/asig5.cpp	/^	size_t m_size;$/;"	m	class:List	typeref:typename:size_t	file:
m_size	mylib/list.hpp	/^	size_t m_size;$/;"	m	class:List	typeref:typename:size_t
m_size	test/src/mylib/list.hpp	/^	size_t m_size;$/;"	m	class:List	typeref:typename:size_t
m_top	asignaciones/asig4.cpp	/^	pointer<Node>& m_top = m_head;$/;"	m	class:Stack	typeref:typename:pointer<Node> &	file:
m_top	mylib/stack.hpp	/^	pointer<Node>& m_top = m_head;$/;"	m	class:Stack	typeref:typename:pointer<Node> &
m_top	test/src/mylib/stack.hpp	/^	pointer<Node>& m_top = m_head;$/;"	m	class:Stack	typeref:typename:pointer<Node> &
main	asignaciones/asig1.cpp	/^auto main() -> int$/;"	f	typeref:typename:int
main	asignaciones/asig2.cpp	/^auto main() -> int$/;"	f	typeref:typename:int
main	asignaciones/asig3.cpp	/^int main()$/;"	f	typeref:typename:int
main	asignaciones/asig4.cpp	/^auto main() -> int$/;"	f	typeref:typename:int
main	asignaciones/asig5.cpp	/^auto main() -> int {$/;"	f	typeref:typename:int
main	mylib/unit_tests/main.cpp	/^int main()$/;"	f	typeref:typename:int
main	mylib/unit_tests/main2.cpp	/^auto main() -> int$/;"	f	typeref:typename:int
main	mylib/unit_tests/unit_tests.cpp	/^auto main() -> int32_t$/;"	f	typeref:typename:int32_t
main	power/src/main.cpp	/^auto main() -> int$/;"	f	typeref:typename:int
main	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^auto main() -> int$/;"	f	typeref:typename:int
main	primerexamen_segundaparte/src/main.cpp	/^auto main() -> int$/;"	f	typeref:typename:int
main	test/src/main.cpp	/^auto main() -> int$/;"	f	typeref:typename:int
main	test/src/mylib/unit_tests/main.cpp	/^int main()$/;"	f	typeref:typename:int
main	test/src/mylib/unit_tests/main2.cpp	/^auto main() -> int$/;"	f	typeref:typename:int
main	test/src/mylib/unit_tests/unit_tests.cpp	/^auto main() -> int32_t$/;"	f	typeref:typename:int32_t
mean	mylib/src/functions.cpp	/^auto mean(ref<const std::vector<double>> arr) -> double$/;"	f	typeref:typename:double
mean	mylib/unit_tests/unit_tests.cpp	/^static auto mean(std::vector<double> array) -> double$/;"	f	typeref:typename:double	file:
mean	test/src/mylib/src/functions.cpp	/^auto mean(ref<const std::vector<double>> arr) -> double$/;"	f	typeref:typename:double
mean	test/src/mylib/unit_tests/unit_tests.cpp	/^static auto mean(std::vector<double> array) -> double$/;"	f	typeref:typename:double	file:
operator !=	asignaciones/asig1.cpp	/^auto Circle::operator!=(const Circle &rhs) const -> bool$/;"	f	class:Circle	typeref:typename:bool
operator +	asignaciones/asig1.cpp	/^auto Circle::operator+(const Circle &rhs) const -> Circle$/;"	f	class:Circle	typeref:typename:Circle
operator +	asignaciones/asig2.cpp	/^auto Circle::operator+(const Circle& rhs) const -> Circle$/;"	f	class:Circle	typeref:typename:Circle
operator +	asignaciones/asig2.cpp	/^auto Cylinder::operator+(const Cylinder& rhs) -> Cylinder$/;"	f	class:Cylinder	typeref:typename:Cylinder
operator +	asignaciones/asig2.cpp	/^auto Sphere::operator+(Sphere const& rhs) const -> Sphere$/;"	f	class:Sphere	typeref:typename:Sphere
operator +	mylib/src/circle.cpp	/^auto Circle::operator+(const Circle& rhs) const -> Circle$/;"	f	class:Circle	typeref:typename:Circle
operator +	mylib/src/cylinder.cpp	/^auto Cylinder::operator+(const Cylinder& rhs) -> Cylinder$/;"	f	class:Cylinder	typeref:typename:Cylinder
operator +	mylib/src/sphere.cpp	/^auto Sphere::operator+(Sphere const& rhs) const -> Sphere$/;"	f	class:Sphere	typeref:typename:Sphere
operator +	test/src/mylib/src/circle.cpp	/^auto Circle::operator+(const Circle& rhs) const -> Circle$/;"	f	class:Circle	typeref:typename:Circle
operator +	test/src/mylib/src/cylinder.cpp	/^auto Cylinder::operator+(const Cylinder& rhs) -> Cylinder$/;"	f	class:Cylinder	typeref:typename:Cylinder
operator +	test/src/mylib/src/sphere.cpp	/^auto Sphere::operator+(Sphere const& rhs) const -> Sphere$/;"	f	class:Sphere	typeref:typename:Sphere
operator <<	asignaciones/asig1.cpp	/^auto operator<<(std::ostream &lhs, const Circle &rhs) -> std::ostream &$/;"	f	typeref:typename:std::ostream &
operator <<	asignaciones/asig2.cpp	/^auto operator<<(std::ostream& lhs, Sphere const& rhs) -> std::ostream&$/;"	f	typeref:typename:std::ostream &
operator <<	asignaciones/asig2.cpp	/^auto operator<<(std::ostream& lhs, const Circle& rhs) -> std::ostream&$/;"	f	typeref:typename:std::ostream &
operator <<	asignaciones/asig2.cpp	/^auto operator<<(std::ostream& lhs, const Cylinder& rhs) -> std::ostream&$/;"	f	typeref:typename:std::ostream &
operator <<	asignaciones/asig3.cpp	/^auto operator<<(std::ostream& lhs, reference<const List> rhs) -> std::ostream&$/;"	f	typeref:typename:std::ostream &
operator <<	asignaciones/asig4.cpp	/^auto operator<<(std::ostream& lhs, reference<const List> rhs) -> std::ostream&$/;"	f	typeref:typename:std::ostream &
operator <<	asignaciones/asig5.cpp	/^auto operator<<(std::ostream& lhs, reference<const List> rhs) -> std::ostream&$/;"	f	typeref:typename:std::ostream &
operator <<	mylib/src/circle.cpp	/^auto operator<<(std::ostream& lhs, const Circle& rhs) -> std::ostream&$/;"	f	typeref:typename:std::ostream &
operator <<	mylib/src/cylinder.cpp	/^auto operator<<(std::ostream& lhs, const Cylinder& rhs) -> std::ostream&$/;"	f	typeref:typename:std::ostream &
operator <<	mylib/src/list.cpp	/^auto operator<<(std::ostream& lhs, reference<const List> rhs) -> std::ostream&$/;"	f	typeref:typename:std::ostream &
operator <<	mylib/src/sphere.cpp	/^auto operator<<(std::ostream& lhs, Sphere const& rhs) -> std::ostream&$/;"	f	typeref:typename:std::ostream &
operator <<	test/src/mylib/src/circle.cpp	/^auto operator<<(std::ostream& lhs, const Circle& rhs) -> std::ostream&$/;"	f	typeref:typename:std::ostream &
operator <<	test/src/mylib/src/cylinder.cpp	/^auto operator<<(std::ostream& lhs, const Cylinder& rhs) -> std::ostream&$/;"	f	typeref:typename:std::ostream &
operator <<	test/src/mylib/src/list.cpp	/^auto operator<<(std::ostream& lhs, reference<const List> rhs) -> std::ostream&$/;"	f	typeref:typename:std::ostream &
operator <<	test/src/mylib/src/sphere.cpp	/^auto operator<<(std::ostream& lhs, Sphere const& rhs) -> std::ostream&$/;"	f	typeref:typename:std::ostream &
operator =	asignaciones/asig3.cpp	/^auto List::operator=(reference<const List> rhs) -> reference<const List>$/;"	f	class:List	typeref:typename:reference<const List>
operator =	asignaciones/asig4.cpp	/^auto List::operator=(reference<const List> rhs) -> reference<const List>$/;"	f	class:List	typeref:typename:reference<const List>
operator =	asignaciones/asig4.cpp	/^auto Stack::operator=(reference<const Stack> rhs) -> reference<Stack>$/;"	f	class:Stack	typeref:typename:reference<Stack>
operator =	asignaciones/asig5.cpp	/^auto List::operator=(reference<const List> rhs) -> reference<const List>$/;"	f	class:List	typeref:typename:reference<const List>
operator =	asignaciones/asig5.cpp	/^auto Queue::operator=(reference<const Queue> rhs) -> reference<const Queue>$/;"	f	class:Queue	typeref:typename:reference<const Queue>
operator =	mylib/binary_tree_impl.hpp	/^auto btree<T>::operator = (ref<const btree> rhs) -> ref<const btree>$/;"	f	class:btree	typeref:typename:ref<const btree>
operator =	mylib/src/list.cpp	/^auto List::operator=(reference<const List> rhs) -> reference<const List>$/;"	f	class:List	typeref:typename:reference<const List>
operator =	mylib/src/queue.cpp	/^auto Queue::operator=(reference<const Queue> rhs) -> reference<const Queue>$/;"	f	class:Queue	typeref:typename:reference<const Queue>
operator =	mylib/src/stack.cpp	/^auto Stack::operator=(reference<const Stack> rhs) -> reference<Stack>$/;"	f	class:Stack	typeref:typename:reference<Stack>
operator =	test/src/mylib/binary_tree_impl.hpp	/^auto btree<T>::operator = (ref<const btree> rhs) -> ref<const btree>$/;"	f	class:btree	typeref:typename:ref<const btree>
operator =	test/src/mylib/src/list.cpp	/^auto List::operator=(reference<const List> rhs) -> reference<const List>$/;"	f	class:List	typeref:typename:reference<const List>
operator =	test/src/mylib/src/queue.cpp	/^auto Queue::operator=(reference<const Queue> rhs) -> reference<const Queue>$/;"	f	class:Queue	typeref:typename:reference<const Queue>
operator =	test/src/mylib/src/stack.cpp	/^auto Stack::operator=(reference<const Stack> rhs) -> reference<Stack>$/;"	f	class:Stack	typeref:typename:reference<Stack>
operator ==	asignaciones/asig1.cpp	/^auto Circle::operator==(const Circle &rhs) const -> bool$/;"	f	class:Circle	typeref:typename:bool
operator ==	asignaciones/asig2.cpp	/^auto Circle::operator==(const Circle& rhs) const -> bool$/;"	f	class:Circle	typeref:typename:bool
operator ==	asignaciones/asig2.cpp	/^auto Cylinder::operator==(const Cylinder& rhs) -> bool$/;"	f	class:Cylinder	typeref:typename:bool
operator ==	asignaciones/asig2.cpp	/^auto Sphere::operator==(Sphere const& rhs) const -> bool$/;"	f	class:Sphere	typeref:typename:bool
operator ==	asignaciones/asig5.cpp	/^auto Queue::operator==(reference<const Queue> rhs) -> bool$/;"	f	class:Queue	typeref:typename:bool
operator ==	mylib/src/circle.cpp	/^auto Circle::operator==(const Circle& rhs) const -> bool$/;"	f	class:Circle	typeref:typename:bool
operator ==	mylib/src/cylinder.cpp	/^auto Cylinder::operator==(const Cylinder& rhs) -> bool$/;"	f	class:Cylinder	typeref:typename:bool
operator ==	mylib/src/queue.cpp	/^auto Queue::operator==(reference<const Queue> rhs) -> bool$/;"	f	class:Queue	typeref:typename:bool
operator ==	mylib/src/sphere.cpp	/^auto Sphere::operator==(Sphere const& rhs) const -> bool$/;"	f	class:Sphere	typeref:typename:bool
operator ==	test/src/mylib/src/circle.cpp	/^auto Circle::operator==(const Circle& rhs) const -> bool$/;"	f	class:Circle	typeref:typename:bool
operator ==	test/src/mylib/src/cylinder.cpp	/^auto Cylinder::operator==(const Cylinder& rhs) -> bool$/;"	f	class:Cylinder	typeref:typename:bool
operator ==	test/src/mylib/src/queue.cpp	/^auto Queue::operator==(reference<const Queue> rhs) -> bool$/;"	f	class:Queue	typeref:typename:bool
operator ==	test/src/mylib/src/sphere.cpp	/^auto Sphere::operator==(Sphere const& rhs) const -> bool$/;"	f	class:Sphere	typeref:typename:bool
operator >>	asignaciones/asig1.cpp	/^auto operator>>(std::istream &lhs, Circle &rhs) -> std::istream &$/;"	f	typeref:typename:std::istream &
operator >>	asignaciones/asig2.cpp	/^auto operator>>(std::istream& lhs, Circle& rhs) -> std::istream&$/;"	f	typeref:typename:std::istream &
operator >>	asignaciones/asig2.cpp	/^auto operator>>(std::istream& lhs, Cylinder& rhs) -> std::istream&$/;"	f	typeref:typename:std::istream &
operator >>	asignaciones/asig2.cpp	/^auto operator>>(std::istream& lhs, Sphere& rhs) -> std::istream&$/;"	f	typeref:typename:std::istream &
operator >>	asignaciones/asig3.cpp	/^auto operator>>(std::istream& lhs, reference<List> rhs) -> std::istream&$/;"	f	typeref:typename:std::istream &
operator >>	asignaciones/asig4.cpp	/^auto operator>>(std::istream& lhs, reference<List> rhs) -> std::istream&$/;"	f	typeref:typename:std::istream &
operator >>	asignaciones/asig5.cpp	/^auto operator>>(std::istream& lhs, reference<List> rhs) -> std::istream&$/;"	f	typeref:typename:std::istream &
operator >>	mylib/src/circle.cpp	/^auto operator>>(std::istream& lhs, Circle& rhs) -> std::istream&$/;"	f	typeref:typename:std::istream &
operator >>	mylib/src/cylinder.cpp	/^auto operator>>(std::istream& lhs, Cylinder& rhs) -> std::istream&$/;"	f	typeref:typename:std::istream &
operator >>	mylib/src/list.cpp	/^auto operator>>(std::istream& lhs, reference<List> rhs) -> std::istream&$/;"	f	typeref:typename:std::istream &
operator >>	mylib/src/sphere.cpp	/^auto operator>>(std::istream& lhs, Sphere& rhs) -> std::istream&$/;"	f	typeref:typename:std::istream &
operator >>	test/src/mylib/src/circle.cpp	/^auto operator>>(std::istream& lhs, Circle& rhs) -> std::istream&$/;"	f	typeref:typename:std::istream &
operator >>	test/src/mylib/src/cylinder.cpp	/^auto operator>>(std::istream& lhs, Cylinder& rhs) -> std::istream&$/;"	f	typeref:typename:std::istream &
operator >>	test/src/mylib/src/list.cpp	/^auto operator>>(std::istream& lhs, reference<List> rhs) -> std::istream&$/;"	f	typeref:typename:std::istream &
operator >>	test/src/mylib/src/sphere.cpp	/^auto operator>>(std::istream& lhs, Sphere& rhs) -> std::istream&$/;"	f	typeref:typename:std::istream &
pointer	asignaciones/asig3.cpp	/^template <typename T> using pointer = T*;$/;"	t	typeref:typename:T *	file:
pointer	asignaciones/asig4.cpp	/^template <typename T> using pointer = T*;$/;"	t	typeref:typename:T *	file:
pointer	asignaciones/asig5.cpp	/^template <typename T> using pointer = T*;$/;"	t	typeref:typename:T *	file:
pointer	mylib/data.hpp	/^template <typename T> using pointer = T*;$/;"	t	typeref:typename:T *
pointer	test/src/mylib/data.hpp	/^template <typename T> using pointer = T*;$/;"	t	typeref:typename:T *
pop	asignaciones/asig4.cpp	/^auto Stack::pop() -> int$/;"	f	class:Stack	typeref:typename:int
pop	mylib/src/fast_stack.cpp	/^auto fstack::pop() -> void$/;"	f	class:fstack	typeref:typename:void
pop	mylib/src/stack.cpp	/^auto Stack::pop() -> std::optional<int>$/;"	f	class:Stack	typeref:typename:std::optional<int>
pop	test/src/mylib/src/fast_stack.cpp	/^auto fstack::pop() -> void$/;"	f	class:fstack	typeref:typename:void
pop	test/src/mylib/src/stack.cpp	/^auto Stack::pop() -> std::optional<int>$/;"	f	class:Stack	typeref:typename:std::optional<int>
powI	power/src/main.cpp	/^auto powI(double base, int exp) -> double {$/;"	f	typeref:typename:double
powR	power/src/main.cpp	/^auto powR(double base, int exp) -> double {$/;"	f	typeref:typename:double
prepend	asignaciones/asig3.cpp	/^auto List::prepend(int value) -> void$/;"	f	class:List	typeref:typename:void
prepend	asignaciones/asig4.cpp	/^auto List::prepend(int value) -> void$/;"	f	class:List	typeref:typename:void
prepend	asignaciones/asig5.cpp	/^auto List::prepend(int value) -> void$/;"	f	class:List	typeref:typename:void
prepend	mylib/src/list.cpp	/^auto List::prepend(int value) -> void$/;"	f	class:List	typeref:typename:void
prepend	test/src/mylib/src/list.cpp	/^auto List::prepend(int value) -> void$/;"	f	class:List	typeref:typename:void
print	asignaciones/asig1.cpp	/^auto Circle::print() const -> void$/;"	f	class:Circle	typeref:typename:void
print	asignaciones/asig2.cpp	/^auto Circle::print() const -> void$/;"	f	class:Circle	typeref:typename:void
print	asignaciones/asig2.cpp	/^auto Cylinder::print() const -> void$/;"	f	class:Cylinder	typeref:typename:void
print	asignaciones/asig3.cpp	/^auto List::print() const -> void$/;"	f	class:List	typeref:typename:void
print	asignaciones/asig4.cpp	/^auto List::print() const -> void$/;"	f	class:List	typeref:typename:void
print	asignaciones/asig5.cpp	/^auto List::print() const -> void$/;"	f	class:List	typeref:typename:void
print	mylib/src/circle.cpp	/^auto Circle::print() const -> void$/;"	f	class:Circle	typeref:typename:void
print	mylib/src/cylinder.cpp	/^auto Cylinder::print() const -> void$/;"	f	class:Cylinder	typeref:typename:void
print	mylib/src/list.cpp	/^auto List::print() const -> void$/;"	f	class:List	typeref:typename:void
print	mylib/unit_tests/unit_tests.cpp	/^auto print(auto const x) -> void$/;"	f	typeref:typename:void
print	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^auto Employee::print() const -> void$/;"	f	class:Employee	typeref:typename:void
print	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^auto Person::print() const -> void$/;"	f	class:Person	typeref:typename:void
print	primerexamen_segundaparte/src/main.cpp	/^auto Employee::print() const -> void$/;"	f	class:Employee	typeref:typename:void
print	primerexamen_segundaparte/src/main.cpp	/^auto Person::print() const -> void$/;"	f	class:Person	typeref:typename:void
print	test/src/mylib/src/circle.cpp	/^auto Circle::print() const -> void$/;"	f	class:Circle	typeref:typename:void
print	test/src/mylib/src/cylinder.cpp	/^auto Cylinder::print() const -> void$/;"	f	class:Cylinder	typeref:typename:void
print	test/src/mylib/src/list.cpp	/^auto List::print() const -> void$/;"	f	class:List	typeref:typename:void
print	test/src/mylib/unit_tests/unit_tests.cpp	/^auto print(auto const x) -> void$/;"	f	typeref:typename:void
print_ascending	mylib/binary_tree_impl.hpp	/^auto btree<T>::print_ascending() const -> void$/;"	f	class:btree	typeref:typename:void
print_ascending	test/src/mylib/binary_tree_impl.hpp	/^auto btree<T>::print_ascending() const -> void$/;"	f	class:btree	typeref:typename:void
print_descending	mylib/binary_tree_impl.hpp	/^auto btree<T>::print_descending() const -> void$/;"	f	class:btree	typeref:typename:void
print_descending	test/src/mylib/binary_tree_impl.hpp	/^auto btree<T>::print_descending() const -> void$/;"	f	class:btree	typeref:typename:void
print_inorder	mylib/binary_node_impl.hpp	/^auto BinaryNode<T>::print_inorder() const -> void$/;"	f	class:BinaryNode	typeref:typename:void
print_inorder	test/src/mylib/binary_node_impl.hpp	/^auto BinaryNode<T>::print_inorder() const -> void$/;"	f	class:BinaryNode	typeref:typename:void
print_preorder	mylib/binary_node_impl.hpp	/^auto BinaryNode<T>::print_preorder() const -> void$/;"	f	class:BinaryNode	typeref:typename:void
print_preorder	test/src/mylib/binary_node_impl.hpp	/^auto BinaryNode<T>::print_preorder() const -> void$/;"	f	class:BinaryNode	typeref:typename:void
println	mylib/unit_tests/unit_tests.cpp	/^auto println(auto const x) -> void$/;"	f	typeref:typename:void
println	test/src/mylib/unit_tests/unit_tests.cpp	/^auto println(auto const x) -> void$/;"	f	typeref:typename:void
ptr	mylib/binary_node.hpp	/^using ptr = T*;$/;"	t	typeref:typename:T *
ptr	mylib/binary_tree.hpp	/^using ptr = T*;$/;"	t	typeref:typename:T *
ptr	test/src/mylib/binary_node.hpp	/^using ptr = T*;$/;"	t	typeref:typename:T *
ptr	test/src/mylib/binary_tree.hpp	/^using ptr = T*;$/;"	t	typeref:typename:T *
push	asignaciones/asig4.cpp	/^auto Stack::push(int value) -> void$/;"	f	class:Stack	typeref:typename:void
push	mylib/src/fast_stack.cpp	/^auto fstack::push(int val) -> void$/;"	f	class:fstack	typeref:typename:void
push	mylib/src/stack.cpp	/^auto Stack::push(int value) -> void$/;"	f	class:Stack	typeref:typename:void
push	test/src/mylib/src/fast_stack.cpp	/^auto fstack::push(int val) -> void$/;"	f	class:fstack	typeref:typename:void
push	test/src/mylib/src/stack.cpp	/^auto Stack::push(int value) -> void$/;"	f	class:Stack	typeref:typename:void
read_decimal	asignaciones/asig4.cpp	/^auto read_decimal() -> int$/;"	f	typeref:typename:int
read_decimal	mylib/unit_tests/main2.cpp	/^auto read_decimal() -> int$/;"	f	typeref:typename:int
read_decimal	test/src/mylib/unit_tests/main2.cpp	/^auto read_decimal() -> int$/;"	f	typeref:typename:int
read_payroll	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^auto read_payroll(std::vector<Employee>& payroll) -> void$/;"	f	typeref:typename:void
read_payroll	primerexamen_segundaparte/src/main.cpp	/^auto read_payroll(std::vector<Employee>& payroll) -> void$/;"	f	typeref:typename:void
read_radius	asignaciones/asig1.cpp	/^auto read_radius() -> double$/;"	f	typeref:typename:double
read_radius	asignaciones/asig2.cpp	/^auto read_radius(ClassType class_type) -> double$/;"	f	typeref:typename:double
read_radius_and_height	asignaciones/asig2.cpp	/^auto read_radius_and_height() -> std::pair<double, double>$/;"	f	typeref:typename:std::pair<double,double>
ref	mylib/binary_node.hpp	/^using ref = T&;$/;"	t	typeref:typename:T &
ref	mylib/binary_tree.hpp	/^using ref = T&; \/\/ nicer way to type reference variables$/;"	t	typeref:typename:T &
ref	mylib/src/functions.cpp	/^using ref = T&;$/;"	t	typeref:typename:T &	file:
ref	test/src/mylib/binary_node.hpp	/^using ref = T&;$/;"	t	typeref:typename:T &
ref	test/src/mylib/binary_tree.hpp	/^using ref = T&; \/\/ nicer way to type reference variables$/;"	t	typeref:typename:T &
ref	test/src/mylib/src/functions.cpp	/^using ref = T&;$/;"	t	typeref:typename:T &	file:
reference	asignaciones/asig3.cpp	/^template <typename T> using reference = T&;$/;"	t	typeref:typename:T &	file:
reference	asignaciones/asig4.cpp	/^template <typename T> using reference = T&;$/;"	t	typeref:typename:T &	file:
reference	asignaciones/asig5.cpp	/^template <typename T> using reference = T&;$/;"	t	typeref:typename:T &	file:
reference	mylib/data.hpp	/^template <typename T> using reference = T&;$/;"	t	typeref:typename:T &
reference	test/src/mylib/data.hpp	/^template <typename T> using reference = T&;$/;"	t	typeref:typename:T &
remove	asignaciones/asig3.cpp	/^auto List::remove(int value) -> void$/;"	f	class:List	typeref:typename:void
remove	asignaciones/asig4.cpp	/^auto List::remove(int value) -> void$/;"	f	class:List	typeref:typename:void
remove	asignaciones/asig5.cpp	/^auto List::remove(int value) -> void$/;"	f	class:List	typeref:typename:void
remove	mylib/bst_impl.hpp	/^auto bst<T>::remove(const T item) -> void$/;"	f	class:bst	typeref:typename:void
remove	mylib/src/list.cpp	/^auto List::remove(int value) -> void$/;"	f	class:List	typeref:typename:void
remove	test/src/mylib/bst_impl.hpp	/^auto bst<T>::remove(const T item) -> void$/;"	f	class:bst	typeref:typename:void
remove	test/src/mylib/src/list.cpp	/^auto List::remove(int value) -> void$/;"	f	class:List	typeref:typename:void
remove_from_tree	mylib/bst_impl.hpp	/^auto bst<T>::remove_from_tree(ptr<const BinaryNode<T>> ptr) -> void$/;"	f	class:bst	typeref:typename:void
remove_from_tree	test/src/mylib/bst_impl.hpp	/^auto bst<T>::remove_from_tree(ptr<const BinaryNode<T>> ptr) -> void$/;"	f	class:bst	typeref:typename:void
repeated_division	asignaciones/asig4.cpp	/^auto repeated_division(int decimal) -> Stack$/;"	f	typeref:typename:Stack
repeated_division	mylib/unit_tests/main2.cpp	/^auto repeated_division(int decimal) -> Stack$/;"	f	typeref:typename:Stack
repeated_division	test/src/mylib/unit_tests/main2.cpp	/^auto repeated_division(int decimal) -> Stack$/;"	f	typeref:typename:Stack
right	mylib/binary_node.hpp	/^	ptr<BinaryNode> right;$/;"	m	struct:BinaryNode	typeref:typename:ptr<BinaryNode>
right	test/src/mylib/binary_node.hpp	/^	ptr<BinaryNode> right;$/;"	m	struct:BinaryNode	typeref:typename:ptr<BinaryNode>
root	mylib/binary_tree.hpp	/^	ptr<BinaryNode<T>> root;$/;"	m	class:btree	typeref:typename:ptr<BinaryNode<T>>
root	test/src/mylib/binary_tree.hpp	/^	ptr<BinaryNode<T>> root;$/;"	m	class:btree	typeref:typename:ptr<BinaryNode<T>>
run	mylib/unit_tests/Makefile	/^run: build$/;"	t
run	power/Makefile	/^run: build$/;"	t
run	primerexamen_segundaparte/Makefile	/^run: build$/;"	t
run	test/Makefile	/^run: build$/;"	t
run	test/src/mylib/unit_tests/Makefile	/^run: build$/;"	t
search	asignaciones/asig3.cpp	/^[[nodiscard]] auto List::search(int value) const -> bool$/;"	f	class:List	typeref:typename:bool
search	asignaciones/asig3.cpp	/^[[nodiscard]] auto SortedList::search(int value) const -> bool$/;"	f	class:SortedList	typeref:typename:bool
search	asignaciones/asig4.cpp	/^[[nodiscard]] auto List::search(int value) const -> bool$/;"	f	class:List	typeref:typename:bool
search	asignaciones/asig5.cpp	/^[[nodiscard]] auto List::search(int value) const -> bool$/;"	f	class:List	typeref:typename:bool
search	mylib/bst_impl.hpp	/^auto bst<T>::search(T value) const -> const ptr<const BinaryNode<T>>$/;"	f	class:bst	typeref:typename:const ptr<const BinaryNode<T>>
search	mylib/src/list.cpp	/^[[nodiscard]] auto List::search(int value) const -> bool$/;"	f	class:List	typeref:typename:bool
search	mylib/src/sorted_list.cpp	/^[[nodiscard]] auto SortedList::search(int value) const -> bool$/;"	f	class:SortedList	typeref:typename:bool
search	test/src/mylib/bst_impl.hpp	/^auto bst<T>::search(T value) const -> const ptr<const BinaryNode<T>>$/;"	f	class:bst	typeref:typename:const ptr<const BinaryNode<T>>
search	test/src/mylib/src/list.cpp	/^[[nodiscard]] auto List::search(int value) const -> bool$/;"	f	class:List	typeref:typename:bool
search	test/src/mylib/src/sorted_list.cpp	/^[[nodiscard]] auto SortedList::search(int value) const -> bool$/;"	f	class:SortedList	typeref:typename:bool
selection_sort	mylib/src/functions.cpp	/^auto selection_sort(ref<std::vector<int>> arr) -> void$/;"	f	typeref:typename:void
selection_sort	test/src/mylib/src/functions.cpp	/^auto selection_sort(ref<std::vector<int>> arr) -> void$/;"	f	typeref:typename:void
set_dimensions	asignaciones/asig2.cpp	/^auto Cylinder::set_dimensions(double radius, double height) -> void$/;"	f	class:Cylinder	typeref:typename:void
set_dimensions	mylib/src/cylinder.cpp	/^auto Cylinder::set_dimensions(double radius, double height) -> void$/;"	f	class:Cylinder	typeref:typename:void
set_dimensions	test/src/mylib/src/cylinder.cpp	/^auto Cylinder::set_dimensions(double radius, double height) -> void$/;"	f	class:Cylinder	typeref:typename:void
set_first_name	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^auto Person::set_first_name(std::string const& first) -> void$/;"	f	class:Person	typeref:typename:void
set_first_name	primerexamen_segundaparte/src/main.cpp	/^auto Person::set_first_name(std::string const& first) -> void$/;"	f	class:Person	typeref:typename:void
set_full_name	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^auto Person::set_full_name(std::string const& first, std::string const& last)$/;"	f	class:Person	typeref:typename:void
set_full_name	primerexamen_segundaparte/src/main.cpp	/^auto Person::set_full_name(std::string const& first, std::string const& last)$/;"	f	class:Person	typeref:typename:void
set_height	asignaciones/asig2.cpp	/^auto Cylinder::set_height(double height) -> void$/;"	f	class:Cylinder	typeref:typename:void
set_height	mylib/src/cylinder.cpp	/^auto Cylinder::set_height(double height) -> void$/;"	f	class:Cylinder	typeref:typename:void
set_height	test/src/mylib/src/cylinder.cpp	/^auto Cylinder::set_height(double height) -> void$/;"	f	class:Cylinder	typeref:typename:void
set_hourly_salary	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^auto Employee::set_hourly_salary(double hs) -> void$/;"	f	class:Employee	typeref:typename:void
set_hourly_salary	primerexamen_segundaparte/src/main.cpp	/^auto Employee::set_hourly_salary(double hs) -> void$/;"	f	class:Employee	typeref:typename:void
set_hours_worked	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^auto Employee::set_hours_worked(double hw) -> void$/;"	f	class:Employee	typeref:typename:void
set_hours_worked	primerexamen_segundaparte/src/main.cpp	/^auto Employee::set_hours_worked(double hw) -> void$/;"	f	class:Employee	typeref:typename:void
set_last_name	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^auto Person::set_last_name(std::string const& last) -> void$/;"	f	class:Person	typeref:typename:void
set_last_name	primerexamen_segundaparte/src/main.cpp	/^auto Person::set_last_name(std::string const& last) -> void$/;"	f	class:Person	typeref:typename:void
set_radius	asignaciones/asig1.cpp	/^auto Circle::set_radius(double radius) -> void { _radius = radius; }$/;"	f	class:Circle	typeref:typename:void
set_radius	asignaciones/asig2.cpp	/^auto Circle::set_radius(double radius) -> void$/;"	f	class:Circle	typeref:typename:void
set_radius	mylib/src/circle.cpp	/^auto Circle::set_radius(double radius) -> void$/;"	f	class:Circle	typeref:typename:void
set_radius	test/src/mylib/src/circle.cpp	/^auto Circle::set_radius(double radius) -> void$/;"	f	class:Circle	typeref:typename:void
size	mylib/fast_stack.hpp	/^	sz size;$/;"	m	class:fstack	typeref:typename:sz
size	test/src/mylib/fast_stack.hpp	/^	sz size;$/;"	m	class:fstack	typeref:typename:sz
size_t	mylib/binary_node.hpp	/^using size_t = std::size_t;$/;"	t	typeref:typename:std::size_t
size_t	mylib/binary_tree.hpp	/^using size_t = std::size_t;$/;"	t	typeref:typename:std::size_t
size_t	test/src/mylib/binary_node.hpp	/^using size_t = std::size_t;$/;"	t	typeref:typename:std::size_t
size_t	test/src/mylib/binary_tree.hpp	/^using size_t = std::size_t;$/;"	t	typeref:typename:std::size_t
sz	mylib/fast_stack.hpp	/^using sz = std::size_t;$/;"	t	typeref:typename:std::size_t
sz	test/src/mylib/fast_stack.hpp	/^using sz = std::size_t;$/;"	t	typeref:typename:std::size_t
top	asignaciones/asig4.cpp	/^[[nodiscard]] auto Stack::top() const -> int$/;"	f	class:Stack	typeref:typename:int
top	mylib/src/fast_stack.cpp	/^auto fstack::top() -> int$/;"	f	class:fstack	typeref:typename:int
top	mylib/src/stack.cpp	/^[[nodiscard]] auto Stack::top() const -> std::optional<int>$/;"	f	class:Stack	typeref:typename:std::optional<int>
top	test/src/mylib/src/fast_stack.cpp	/^auto fstack::top() -> int$/;"	f	class:fstack	typeref:typename:int
top	test/src/mylib/src/stack.cpp	/^[[nodiscard]] auto Stack::top() const -> std::optional<int>$/;"	f	class:Stack	typeref:typename:std::optional<int>
~Circle	asignaciones/asig1.cpp	/^Circle::~Circle() { std::cout << "Destructor called" << std::endl ; }$/;"	f	class:Circle
~Cylinder	asignaciones/asig2.cpp	/^Cylinder::~Cylinder()$/;"	f	class:Cylinder
~Cylinder	mylib/src/cylinder.cpp	/^Cylinder::~Cylinder()$/;"	f	class:Cylinder
~Cylinder	test/src/mylib/src/cylinder.cpp	/^Cylinder::~Cylinder()$/;"	f	class:Cylinder
~Employee	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^Employee::~Employee()$/;"	f	class:Employee
~Employee	primerexamen_segundaparte/src/main.cpp	/^Employee::~Employee()$/;"	f	class:Employee
~List	asignaciones/asig3.cpp	/^List::~List()$/;"	f	class:List
~List	asignaciones/asig4.cpp	/^List::~List()$/;"	f	class:List
~List	asignaciones/asig5.cpp	/^List::~List()$/;"	f	class:List
~List	mylib/src/list.cpp	/^List::~List()$/;"	f	class:List
~List	test/src/mylib/src/list.cpp	/^List::~List()$/;"	f	class:List
~Person	primerexamen_segundaparte/src/PrimerExamenSegundaParteDiegoEstrada.cpp	/^Person::~Person()$/;"	f	class:Person
~Person	primerexamen_segundaparte/src/main.cpp	/^Person::~Person()$/;"	f	class:Person
~Queue	asignaciones/asig5.cpp	/^Queue::~Queue()$/;"	f	class:Queue
~Queue	mylib/src/queue.cpp	/^Queue::~Queue()$/;"	f	class:Queue
~Queue	test/src/mylib/src/queue.cpp	/^Queue::~Queue()$/;"	f	class:Queue
~SortedList	asignaciones/asig3.cpp	/^SortedList::~SortedList()$/;"	f	class:SortedList
~SortedList	mylib/src/sorted_list.cpp	/^SortedList::~SortedList()$/;"	f	class:SortedList
~SortedList	test/src/mylib/src/sorted_list.cpp	/^SortedList::~SortedList()$/;"	f	class:SortedList
~Sphere	asignaciones/asig2.cpp	/^Sphere::~Sphere()$/;"	f	class:Sphere
~Sphere	mylib/src/sphere.cpp	/^Sphere::~Sphere()$/;"	f	class:Sphere
~Sphere	test/src/mylib/src/sphere.cpp	/^Sphere::~Sphere()$/;"	f	class:Sphere
~Stack	asignaciones/asig4.cpp	/^Stack::~Stack()$/;"	f	class:Stack
~Stack	mylib/src/stack.cpp	/^Stack::~Stack()$/;"	f	class:Stack
~Stack	test/src/mylib/src/stack.cpp	/^Stack::~Stack()$/;"	f	class:Stack
~btree	mylib/binary_tree_impl.hpp	/^btree<T>::~btree()$/;"	f	class:btree
~btree	test/src/mylib/binary_tree_impl.hpp	/^btree<T>::~btree()$/;"	f	class:btree
~fstack	mylib/src/fast_stack.cpp	/^fstack::~fstack()$/;"	f	class:fstack
~fstack	test/src/mylib/src/fast_stack.cpp	/^fstack::~fstack()$/;"	f	class:fstack
